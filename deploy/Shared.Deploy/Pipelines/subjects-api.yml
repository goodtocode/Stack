trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - src/Subjects.Presentation.Api/*
    - src/Shared.Abstractions/*
    - src/Shared.Extensions/*
    - src/Shared.Extensions.Mvc/*
    - src/Shared.Specs/*

variables:
- group: Development
- name: workingDirectory
  value: '$(System.DefaultWorkingDirectory)/src/Subjects.Presentation.Api'  
- name: buildConfiguration
  value: 'Release'  
- name: MSBUILDSINGLELOADCONTEXT
  value: 1

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
        name: Hosted Windows 2019 with VS2019
        demands: msbuild

    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: '$env:AzureSettingsConnection=$(AzureSettingsConnection)'

    - task: PowerShell@2
      displayName: 'Set-Version'
      inputs:
        filePath: 'deploy/Shared.Deploy/Assembly/Set-Version.ps1'
        arguments: '-Path $(System.DefaultWorkingDirectory) -VersionToReplace 5.20.1 -Major 05'
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: DeleteFiles@1
      displayName: 'Delete unwanted projects'
      inputs:
        SourceFolder: $(System.DefaultWorkingDirectory)
        RemoveSourceFolder: true
        contents: |
          /docs/*
          /deploy/*
          /samples/*
          /tests/*

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: 'restore'
        projects: |
          $(workingDirectory)/*.csproj
        feedsToUse: config
        nugetConfigPath: .nuget/NuGet.config

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        projects: |
          $(System.DefaultWorkingDirectory)/**/*.Specs.Unit.csproj

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        projects: |
          $(workingDirectory)/*.csproj
        arguments: '--output $(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'